{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport interpolateNode from \"../reanimated1/derived/interpolate\";\nexport var Extrapolation;\n(function (Extrapolation) {\n  Extrapolation[\"IDENTITY\"] = \"identity\";\n  Extrapolation[\"CLAMP\"] = \"clamp\";\n  Extrapolation[\"EXTEND\"] = \"extend\";\n})(Extrapolation || (Extrapolation = {}));\nfunction isNode(x) {\n  'worklet';\n\n  return x.__nodeId !== undefined;\n}\nfunction getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n  'worklet';\n\n  switch (type) {\n    case Extrapolation.IDENTITY:\n      return x;\n    case Extrapolation.CLAMP:\n      if (coef * val < coef * leftEdgeOutput) {\n        return leftEdgeOutput;\n      }\n      return rightEdgeOutput;\n    case Extrapolation.EXTEND:\n    default:\n      return val;\n  }\n}\nfunction isExtrapolate(value) {\n  'worklet';\n\n  return value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY;\n}\nfunction validateType(type) {\n  'worklet';\n  var extrapolationConfig = {\n    extrapolateLeft: Extrapolation.EXTEND,\n    extrapolateRight: Extrapolation.EXTEND\n  };\n  if (!type) {\n    return extrapolationConfig;\n  }\n  if (typeof type === 'string') {\n    if (!isExtrapolate(type)) {\n      throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\\n        interpolate(value, [inputRange], [outputRange], \\\"clamp\\\")\");\n    }\n    extrapolationConfig.extrapolateLeft = type;\n    extrapolationConfig.extrapolateRight = type;\n    return extrapolationConfig;\n  }\n  if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n    throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\\n      interpolate(value, [inputRange], [outputRange], {\\n        extrapolateLeft: Extrapolation.CLAMP,\\n        extrapolateRight: Extrapolation.IDENTITY\\n      }})\");\n  }\n  _extends(extrapolationConfig, type);\n  return extrapolationConfig;\n}\nfunction internalInterpolate(x, narrowedInput, extrapolationConfig) {\n  'worklet';\n\n  var leftEdgeInput = narrowedInput.leftEdgeInput,\n    rightEdgeInput = narrowedInput.rightEdgeInput,\n    leftEdgeOutput = narrowedInput.leftEdgeOutput,\n    rightEdgeOutput = narrowedInput.rightEdgeOutput;\n  if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\n  var progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n  var val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n  var coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n  if (coef * val < coef * leftEdgeOutput) {\n    return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n  } else if (coef * val > coef * rightEdgeOutput) {\n    return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n  }\n  return val;\n}\nexport function interpolate(x, input, output, type) {\n  'worklet';\n\n  if (input.length < 2 || output.length < 2) {\n    throw Error('Interpolation input and output should contain at least two values.');\n  }\n  var extrapolationConfig = validateType(type);\n  if (isNode(x)) {\n    console.warn(\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\");\n    return interpolateNode(x, {\n      inputRange: input,\n      outputRange: output,\n      extrapolateLeft: extrapolationConfig.extrapolateLeft,\n      extrapolateRight: extrapolationConfig.extrapolateRight\n    });\n  }\n  var length = input.length;\n  var narrowedInput = {\n    leftEdgeInput: input[0],\n    rightEdgeInput: input[1],\n    leftEdgeOutput: output[0],\n    rightEdgeOutput: output[1]\n  };\n  if (length > 2) {\n    if (x > input[length - 1]) {\n      narrowedInput.leftEdgeInput = input[length - 2];\n      narrowedInput.rightEdgeInput = input[length - 1];\n      narrowedInput.leftEdgeOutput = output[length - 2];\n      narrowedInput.rightEdgeOutput = output[length - 1];\n    } else {\n      for (var i = 1; i < length; ++i) {\n        if (x <= input[i]) {\n          narrowedInput.leftEdgeInput = input[i - 1];\n          narrowedInput.rightEdgeInput = input[i];\n          narrowedInput.leftEdgeOutput = output[i - 1];\n          narrowedInput.rightEdgeOutput = output[i];\n          break;\n        }\n      }\n    }\n  }\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}","map":{"version":3,"names":["interpolateNode","Extrapolation","isNode","x","__nodeId","undefined","getVal","type","coef","val","leftEdgeOutput","rightEdgeOutput","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","Error","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","interpolate","input","output","length","console","warn","inputRange","outputRange","i"],"sources":["D:/szkolenia/ReactNativewPraktyce_12_14_12_2022/ReactNativeInPractice/6_Nawigacja/2_passing_params/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js"],"sourcesContent":["// @ts-ignore JS file\nimport interpolateNode from '../reanimated1/derived/interpolate';\nexport var Extrapolation;\n(function (Extrapolation) {\n    Extrapolation[\"IDENTITY\"] = \"identity\";\n    Extrapolation[\"CLAMP\"] = \"clamp\";\n    Extrapolation[\"EXTEND\"] = \"extend\";\n})(Extrapolation || (Extrapolation = {}));\nfunction isNode(x) {\n    'worklet';\n    return x.__nodeId !== undefined;\n}\nfunction getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n    'worklet';\n    switch (type) {\n        case Extrapolation.IDENTITY:\n            return x;\n        case Extrapolation.CLAMP:\n            if (coef * val < coef * leftEdgeOutput) {\n                return leftEdgeOutput;\n            }\n            return rightEdgeOutput;\n        case Extrapolation.EXTEND:\n        default:\n            return val;\n    }\n}\nfunction isExtrapolate(value) {\n    'worklet';\n    return (value === Extrapolation.EXTEND ||\n        value === Extrapolation.CLAMP ||\n        value === Extrapolation.IDENTITY);\n}\n// validates extrapolations type\n// if type is correct, converts it to ExtrapolationConfig\nfunction validateType(type) {\n    'worklet';\n    // initialize extrapolationConfig with default extrapolation\n    const extrapolationConfig = {\n        extrapolateLeft: Extrapolation.EXTEND,\n        extrapolateRight: Extrapolation.EXTEND,\n    };\n    if (!type) {\n        return extrapolationConfig;\n    }\n    if (typeof type === 'string') {\n        if (!isExtrapolate(type)) {\n            throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n        }\n        extrapolationConfig.extrapolateLeft = type;\n        extrapolationConfig.extrapolateRight = type;\n        return extrapolationConfig;\n    }\n    // otherwise type is extrapolation config object\n    if ((type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\n        (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))) {\n        throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);\n    }\n    Object.assign(extrapolationConfig, type);\n    return extrapolationConfig;\n}\nfunction internalInterpolate(x, narrowedInput, extrapolationConfig) {\n    'worklet';\n    const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } = narrowedInput;\n    if (rightEdgeInput - leftEdgeInput === 0)\n        return leftEdgeOutput;\n    const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n    const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n    const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n    if (coef * val < coef * leftEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    }\n    else if (coef * val > coef * rightEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    }\n    return val;\n}\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolatation.CLAMP)\nexport function interpolate(x, input, output, type) {\n    'worklet';\n    if (input.length < 2 || output.length < 2) {\n        throw Error('Interpolation input and output should contain at least two values.');\n    }\n    const extrapolationConfig = validateType(type);\n    if (isNode(x)) {\n        console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\n        return interpolateNode(x, {\n            inputRange: input,\n            outputRange: output,\n            extrapolateLeft: extrapolationConfig.extrapolateLeft,\n            extrapolateRight: extrapolationConfig.extrapolateRight,\n        });\n    }\n    const length = input.length;\n    const narrowedInput = {\n        leftEdgeInput: input[0],\n        rightEdgeInput: input[1],\n        leftEdgeOutput: output[0],\n        rightEdgeOutput: output[1],\n    };\n    if (length > 2) {\n        if (x > input[length - 1]) {\n            narrowedInput.leftEdgeInput = input[length - 2];\n            narrowedInput.rightEdgeInput = input[length - 1];\n            narrowedInput.leftEdgeOutput = output[length - 2];\n            narrowedInput.rightEdgeOutput = output[length - 1];\n        }\n        else {\n            for (let i = 1; i < length; ++i) {\n                if (x <= input[i]) {\n                    narrowedInput.leftEdgeInput = input[i - 1];\n                    narrowedInput.rightEdgeInput = input[i];\n                    narrowedInput.leftEdgeOutput = output[i - 1];\n                    narrowedInput.rightEdgeOutput = output[i];\n                    break;\n                }\n            }\n        }\n    }\n    return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}