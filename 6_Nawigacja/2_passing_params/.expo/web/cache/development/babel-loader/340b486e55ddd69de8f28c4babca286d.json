{"ast":null,"code":"import * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NavigationHelpersContext } from '@react-navigation/core';\nimport useLinkTo from \"./useLinkTo\";\nexport default function useLinkProps(_ref) {\n  var to = _ref.to,\n    action = _ref.action;\n  var navigation = React.useContext(NavigationHelpersContext);\n  var linkTo = useLinkTo();\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n    var shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\"To 'to' option is invalid (found '\".concat(String(to), \"'. It must be a valid string for navigation.\"));\n        }\n        linkTo(to);\n      }\n    }\n  };\n  return {\n    href: to,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAEA,SAEEC,wBAFF,QAGO,wBAHP;AAIA,OAAOC,SAAP;AAaA,eAAe,SAASC,YAAT,OAA6C;EAAA,IAArBC,EAAF,QAAEA,EAAF;IAAMC;EACzC,IAAMC,UAAU,GAAGN,KAAK,CAACO,UAAN,CAAiBN,wBAAjB,CAAnB;EACA,IAAMO,MAAM,GAAGN,SAAS,EAAxB;EAEA,IAAMO,OAAO,GACXC,SADID,OAAO,CACXC,CADc,EAEX;IAAA;IACH,IAAIC,YAAY,GAAG,KAAnB;IAEA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,CAACH,CAA9B,EAAiC;MAC/BC,YAAY,GAAGD,CAAC,GAAG,CAACA,CAAC,CAACI,gBAAN,GAAyB,IAAzC;IACD,CAFD,MAEO,IACL,CAACJ,CAAC,CAACI,gBAAH,IAEA,EAAEJ,CAAC,CAACK,OAAF,IAAaL,CAAC,CAACM,MAAf,IAAyBN,CAAC,CAACO,OAA3B,IAAsCP,CAAC,CAACQ,QAA1C,CAFA,KAICR,CAAC,CAACS,MAAF,IAAY,IAAZ,IAAoBT,CAAC,CAACS,MAAF,KAAa,CAJlC,KAMA,CAACC,SAAD,EAAY,IAAZ,EAAkB,EAAlB,EAAsB,MAAtB,EAA8BC,QAA9B,qBAAuCX,CAAC,CAACY,aAAzC,qDAAuCC,iBAAiBC,MAAxD,CAPK,EAQL;MACAd,CAAC,CAACe,cAAF;MACAd,YAAY,GAAG,IAAf;IACD;IAED,IAAIA,YAAJ,EAAkB;MAChB,IAAIN,MAAJ,EAAY;QACV,IAAIC,UAAJ,EAAgB;UACdA,UAAU,CAACoB,QAAX,CAAoBrB,MAApB;QACD,CAFD,MAEO;UACL,MAAM,IAAIsB,KAAJ,CAAU,oCAAV,CAAN;QACD;MACF,CAND,MAMO;QACL,IAAI,OAAOvB,EAAP,KAAc,QAAlB,EAA4B;UAC1B,MAAM,IAAIuB,KAAJ,6CACiCC,MAAM,CACzCxB,EADyC,CADvC,kDAAN;QAKD;QAEDI,MAAM,CAACJ,EAAD,CAAN;MACD;IACF;EACF,CAvCD;EAyCA,OAAO;IACLyB,IAAI,EAAEzB,EADD;IAEL0B,iBAAiB,EAAE,MAFd;IAGLrB;EAHK,CAAP;AAKD","names":["React","NavigationHelpersContext","useLinkTo","useLinkProps","to","action","navigation","useContext","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","undefined","includes","currentTarget","_e$currentTarget","target","preventDefault","dispatch","Error","String","href","accessibilityRole"],"sources":["useLinkProps.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, GestureResponderEvent } from 'react-native';\nimport {\n  NavigationAction,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport useLinkTo from './useLinkTo';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps({ to, action }: Props) {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\n            `To 'to' option is invalid (found '${String(\n              to\n            )}'. It must be a valid string for navigation.`\n          );\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}