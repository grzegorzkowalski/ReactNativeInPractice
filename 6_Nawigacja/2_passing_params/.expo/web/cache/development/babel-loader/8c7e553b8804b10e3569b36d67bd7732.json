{"ast":null,"code":"import * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport Header from \"./Header\";\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n    scenes = _ref.scenes,\n    layout = _ref.layout,\n    insets = _ref.insets,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    onContentHeightChange = _ref.onContentHeightChange,\n    gestureDirection = _ref.gestureDirection,\n    styleInterpolator = _ref.styleInterpolator,\n    style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentPreviousScene = React.useContext(PreviousSceneContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _getPreviousScene;\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n    var _ref2 = scene.descriptor.options || {},\n      header = _ref2.header,\n      _ref2$headerShown = _ref2.headerShown,\n      headerShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n      headerTransparent = _ref2.headerTransparent;\n    if (!headerShown) {\n      return null;\n    }\n    var isFocused = focusedRoute.key === scene.route.key;\n    var previous = (_getPreviousScene = getPreviousScene({\n      route: scene.route\n    })) !== null && _getPreviousScene !== void 0 ? _getPreviousScene : parentPreviousScene;\n    var previousScene = self[i - 1];\n    var nextScene = self[i + 1];\n    var _ref3 = (previousScene === null || previousScene === void 0 ? void 0 : previousScene.descriptor.options) || {},\n      _ref3$headerShown = _ref3.headerShown,\n      previousHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown;\n    var _ref4 = (nextScene === null || nextScene === void 0 ? void 0 : nextScene.descriptor.options) || {},\n      _ref4$headerShown = _ref4.headerShown,\n      nextHeaderShown = _ref4$headerShown === void 0 ? true : _ref4$headerShown;\n    var isHeaderStatic = previousHeaderShown === false && !nextScene || nextHeaderShown === false;\n    var props = {\n      mode: mode,\n      layout: layout,\n      insets: insets,\n      scene: scene,\n      previous: previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["React","NavigationContext","NavigationRouteContext","Header","forSlideLeft","forSlideUp","forNoAnimation","forSlideRight","PreviousSceneContext","HeaderContainer","mode","scenes","layout","insets","getPreviousScene","getFocusedRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","parentPreviousScene","useContext","Animated","View","pointerEvents","slice","map","scene","i","self","length","descriptor","options","header","headerShown","headerTransparent","isFocused","key","route","previous","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","navigation","Provider","value","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","StyleSheet","create","position","top","left","right"],"sources":["HeaderContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { header, headerShown = true, headerTransparent } =\n          scene.descriptor.options || {};\n\n        if (!headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previous =\n          getPreviousScene({ route: scene.route }) ?? parentPreviousScene;\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n\n        const { headerShown: previousHeaderShown = true } =\n          previousScene?.descriptor.options || {};\n\n        const { headerShown: nextHeaderShown = true } =\n          nextScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          (previousHeaderShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          nextHeaderShown === false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}