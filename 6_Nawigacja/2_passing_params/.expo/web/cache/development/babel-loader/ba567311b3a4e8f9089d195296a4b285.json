{"ast":null,"code":"import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../reanimated1/derived\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors) {\n  'worklet';\n\n  var h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  var s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  var v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors) {\n  'worklet';\n\n  var r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n  var g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n  var b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\nvar getInterpolateRGB = function getInterpolateRGB(colors) {\n  'worklet';\n\n  var r = [];\n  var g = [];\n  var b = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n};\nvar getInterpolateHSV = function getInterpolateHSV(colors) {\n  'worklet';\n\n  var h = [];\n  var s = [];\n  var v = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = RGBtoHSV(processColor(color));\n    if (processedColor) {\n      h.push(processedColor.h);\n      s.push(processedColor.s);\n      v.push(processedColor.v);\n    }\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\nexport var interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n  }\n  throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null)\n  });\n}\nexport var interpolateSharableColor = function interpolateSharableColor(value, interpolateConfig) {\n  'worklet';\n\n  var colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n  }\n  throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};","map":{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","Extrapolate","useSharedValue","interpolateColorsHSV","value","inputRange","colors","h","CLAMP","s","v","interpolateColorsRGB","r","g","b","a","getInterpolateRGB","i","length","color","processedColor","undefined","push","getInterpolateHSV","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["D:/szkolenia/ReactNativewPraktyce_12_14_12_2022/ReactNativeInPractice/6_Nawigacja/2_passing_params/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\nimport { useSharedValue } from './hook/useSharedValue';\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n    'worklet';\n    const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v);\n};\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n    'worklet';\n    const r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n    const g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n    const b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return rgbaColor(r, g, b, a);\n};\nconst getInterpolateRGB = (colors) => {\n    'worklet';\n    const r = [];\n    const g = [];\n    const b = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = processColor(color);\n        // explicit check in case if processedColor is 0\n        if (processedColor !== null && processedColor !== undefined) {\n            r.push(red(processedColor));\n            g.push(green(processedColor));\n            b.push(blue(processedColor));\n            a.push(opacity(processedColor));\n        }\n    }\n    return { r, g, b, a };\n};\nconst getInterpolateHSV = (colors) => {\n    'worklet';\n    const h = [];\n    const s = [];\n    const v = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = RGBtoHSV(processColor(color));\n        if (processedColor) {\n            h.push(processedColor.h);\n            s.push(processedColor.s);\n            v.push(processedColor.v);\n        }\n    }\n    return { h, s, v };\n};\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\n    'worklet';\n    if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n    }\n    else if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n    }\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB) {\n    return useSharedValue({\n        inputRange,\n        outputRange,\n        colorSpace,\n        cache: makeMutable(null),\n    });\n}\nexport const interpolateSharableColor = (value, interpolateConfig) => {\n    'worklet';\n    let colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n        if (!colors) {\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n    }\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n        if (!colors) {\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n    }\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}