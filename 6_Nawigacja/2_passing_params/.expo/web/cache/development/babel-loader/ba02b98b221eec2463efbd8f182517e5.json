{"ast":null,"code":"export default function memoize(callback) {\n  var previous;\n  var result;\n  return function () {\n    var hasChanged = false;\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (var i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n    previous = dependencies;\n    if (hasChanged || result === undefined) {\n      result = callback.apply(void 0, dependencies);\n    }\n    return result;\n  };\n}","map":{"version":3,"mappings":"AAAA,eAAe,SAASA,OAAT,CACbC,QADa,EAEb;EACA,IAAIC,QAAJ;EACA,IAAIC,MAAJ;EAEA,OAAO,YAAmC;IACxC,IAAIC,UAAU,GAAG,KAAjB;IAAA,kCADSC,YAAJ;MAAIA,YAAJ;IAAA;IAGL,IAAIH,QAAJ,EAAc;MACZ,IAAIA,QAAQ,CAACI,MAAT,KAAoBD,YAAY,CAACC,MAArC,EAA6C;QAC3CF,UAAU,GAAG,IAAb;MACD,CAFD,MAEO;QACL,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACI,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;UACxC,IAAIL,QAAQ,CAACK,CAAD,CAAR,KAAgBF,YAAY,CAACE,CAAD,CAAhC,EAAqC;YACnCH,UAAU,GAAG,IAAb;YACA;UACD;QACF;MACF;IACF,CAXD,MAWO;MACLA,UAAU,GAAG,IAAb;IACD;IAEDF,QAAQ,GAAGG,YAAX;IAEA,IAAID,UAAU,IAAID,MAAM,KAAKK,SAA7B,EAAwC;MACtCL,MAAM,GAAGF,QAAQ,eAAII,YAAJ,CAAjB;IACD;IAED,OAAOF,MAAP;EACD,CAzBD;AA0BD","names":["memoize","callback","previous","result","hasChanged","dependencies","length","i","undefined"],"sources":["memoize.tsx"],"sourcesContent":["export default function memoize<Result, Deps extends readonly any[]>(\n  callback: (...deps: Deps) => Result\n) {\n  let previous: Deps | undefined;\n  let result: Result | undefined;\n\n  return (...dependencies: Deps): Result => {\n    let hasChanged = false;\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (let i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback(...dependencies);\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}