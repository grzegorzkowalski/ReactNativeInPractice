{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Color from 'color';\nimport CardSheet from \"./CardSheet\";\nimport { PanGestureHandler, GestureState } from \"../GestureHandler\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n  var _super = _createSuper(Card);\n  function Card() {\n    var _this;\n    _classCallCheck(this, Card);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"isCurrentlyMounted\", false);\n    _defineProperty(_assertThisInitialized(_this), \"isClosing\", new Animated.Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"inverted\", new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection)));\n    _defineProperty(_assertThisInitialized(_this), \"layout\", {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Animated.Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"pendingGestureCallback\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"lastToValue\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function (_ref) {\n      var closing = _ref.closing,\n        velocity = _ref.velocity;\n      var _this$props = _this.props,\n        gesture = _this$props.gesture,\n        transitionSpec = _this$props.transitionSpec,\n        onOpen = _this$props.onOpen,\n        onClose = _this$props.onClose,\n        onTransition = _this$props.onTransition;\n      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {\n        closing: closing\n      }));\n      _this.lastToValue = toValue;\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      _this.setPointerEventsEnabled(!closing);\n      _this.handleStartInteraction();\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n        _this.handleEndInteraction();\n        clearTimeout(_this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getAnimateToValue\", function (_ref3) {\n      var closing = _ref3.closing,\n        layout = _ref3.layout,\n        gestureDirection = _ref3.gestureDirection;\n      if (!closing) {\n        return 0;\n      }\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setPointerEventsEnabled\", function (enabled) {\n      var _this$contentRef$curr;\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n        layout = _this$props2.layout,\n        onClose = _this$props2.onClose,\n        onGestureBegin = _this$props2.onGestureBegin,\n        onGestureCanceled = _this$props2.onGestureCanceled,\n        onGestureEnd = _this$props2.onGestureEnd,\n        gestureDirection = _this$props2.gestureDirection,\n        gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          _this.isSwiping.setValue(TRUE);\n          _this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n            _this.handleEndInteraction();\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n            var distance;\n            var translation;\n            var _velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n                _this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getInterpolatedStyle\", memoize(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return styleInterpolator({\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      });\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"getCardAnimationContext\", memoize(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", React.createRef());\n    return _this;\n  }\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        layout = _this$props3.layout,\n        gestureDirection = _this$props3.gestureDirection,\n        closing = _this$props3.closing;\n      var width = layout.width,\n        height = layout.height;\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n      var toValue = this.getAnimateToValue(this.props);\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n        layout = _this$props4.layout,\n        gestureDirection = _this$props4.gestureDirection,\n        gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          }\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          }\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            }\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        styleInterpolator = _this$props5.styleInterpolator,\n        index = _this$props5.index,\n        current = _this$props5.current,\n        gesture = _this$props5.gesture,\n        next = _this$props5.next,\n        layout = _this$props5.layout,\n        insets = _this$props5.insets,\n        overlay = _this$props5.overlay,\n        overlayEnabled = _this$props5.overlayEnabled,\n        shadowEnabled = _this$props5.shadowEnabled,\n        gestureEnabled = _this$props5.gestureEnabled,\n        gestureDirection = _this$props5.gestureDirection,\n        pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n        children = _this$props5.children,\n        customContainerStyle = _this$props5.containerStyle,\n        contentStyle = _this$props5.contentStyle,\n        rest = _objectWithoutProperties(_this$props5, _excluded);\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var containerStyle = interpolatedStyle.containerStyle,\n        cardStyle = interpolatedStyle.cardStyle,\n        overlayStyle = interpolatedStyle.overlayStyle,\n        shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n        backgroundColor = _StyleSheet$flatten.backgroundColor;\n      var isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: animationContext\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(containerStyle),\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(CardSheet, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n  return Card;\n}(React.Component);\nexport { Card as default };\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Color","CardSheet","PanGestureHandler","GestureState","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","hasOpacityStyle","style","flattenedStyle","StyleSheet","flatten","opacity","Card","args","_defineProperty","Animated","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","toValue","getAnimateToValue","lastToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","handleEndInteraction","isCurrentlyMounted","forceUpdate","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","InteractionManager","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","BEGAN","isSwiping","setValue","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","customContainerStyle","containerStyle","contentStyle","rest","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","Provider","value","View","collapsable","absoluteFill","needsOffscreenAlphaCompositing","styles","container","onGestureEvent","onHandlerStateChange","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","ref","Component","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}