{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().label(\"Email\").email(\"Enter a valid email\").required(\"Please enter a registered email\"),\n  password: Yup.string().label(\"Password\").required().min(6, \"Password must have at least 6 characters \")\n});\nvar ErrorMessage = function ErrorMessage(_ref) {\n  var errorValue = _ref.errorValue;\n  return _jsx(View, {\n    style: styles.errorContainer,\n    children: _jsx(Text, {\n      style: styles.errorText,\n      children: errorValue\n    })\n  });\n};\nexport default function App() {\n  function onLoginHandler(values) {\n    var email = values.email,\n      password = values.password;\n    alert(\"Credentials entered. email: \" + email + \", password: \" + password);\n  }\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: function onSubmit(values, actions) {\n        onLoginHandler(values, actions);\n      },\n      validationSchema: validationSchema,\n      children: function children(_ref2) {\n        var handleChange = _ref2.handleChange,\n          values = _ref2.values,\n          errors = _ref2.errors,\n          touched = _ref2.touched,\n          handleSubmit = _ref2.handleSubmit,\n          handleBlur = _ref2.handleBlur;\n        return _jsxs(_Fragment, {\n          children: [_jsx(TextInput, {\n            style: styles.input,\n            numberOfLines: 1,\n            value: values.email,\n            placeholder: \"Enter email\",\n            onChangeText: handleChange(\"email\"),\n            autoCapitalize: \"none\",\n            autoCompleteType: \"email\",\n            keyboardType: \"email-address\",\n            onBlur: handleBlur(\"email\")\n          }), _jsx(ErrorMessage, {\n            errorValue: touched.email && errors.email\n          }), _jsx(TextInput, {\n            style: styles.input,\n            numberOfLines: 1,\n            value: values.password,\n            placeholder: \"Enter password\",\n            onChangeText: handleChange(\"password\"),\n            autoCapitalize: \"none\",\n            onBlur: handleBlur(\"password\"),\n            secureTextEntry: true\n          }), _jsx(ErrorMessage, {\n            errorValue: touched.password && errors.password\n          }), _jsx(TouchableOpacity, {\n            onPress: handleSubmit,\n            style: styles.buttonContainer,\n            children: _jsx(Text, {\n              style: styles.buttonText,\n              children: \"Login\"\n            })\n          })]\n        });\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  errorContainer: {\n    marginVertical: 5\n  },\n  errorText: {\n    color: \"red\"\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    marginTop: 40\n  },\n  input: {\n    marginVertical: 10,\n    width: Dimensions.get(\"window\").width - 100,\n    height: 40,\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 5\n  },\n  buttonContainer: {\n    marginVertical: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 10,\n    width: Dimensions.get(\"window\").width - 200,\n    height: 44,\n    borderRadius: 5,\n    backgroundColor: \"#343434\"\n  },\n  buttonText: {\n    fontSize: 18,\n    color: \"#ffffff\"\n  }\n});","map":{"version":3,"names":["Formik","Yup","validationSchema","object","shape","email","string","label","required","password","min","ErrorMessage","errorValue","styles","errorContainer","errorText","App","onLoginHandler","values","alert","container","actions","handleChange","errors","touched","handleSubmit","handleBlur","input","buttonContainer","buttonText","StyleSheet","create","marginVertical","color","flex","alignItems","marginTop","width","Dimensions","get","height","borderWidth","padding","borderRadius","justifyContent","backgroundColor","fontSize"],"sources":["D:/szkolenia/ReactNativewPraktyce_12_14_12_2022/ReactNativeInPractice/7_Zaawansowane_komponenty/Formik/App.js"],"sourcesContent":["import {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  StyleSheet,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .label(\"Email\")\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Please enter a registered email\"),\r\n  password: Yup.string()\r\n    .label(\"Password\")\r\n    .required()\r\n    .min(6, \"Password must have at least 6 characters \"),\r\n});\r\n\r\nconst ErrorMessage = ({ errorValue }) => (\r\n  <View style={styles.errorContainer}>\r\n    <Text style={styles.errorText}>{errorValue}</Text>\r\n  </View>\r\n);\r\n\r\nexport default function App() {\r\n  function onLoginHandler(values) {\r\n    const { email, password } = values;\r\n\r\n    alert(`Credentials entered. email: ${email}, password: ${password}`);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Formik\r\n        initialValues={{ email: \"\", password: \"\" }}\r\n        onSubmit={(values, actions) => {\r\n          onLoginHandler(values, actions);\r\n        }}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {({\r\n          handleChange,\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleSubmit,\r\n          handleBlur,\r\n        }) => (\r\n          <>\r\n            <TextInput\r\n              style={styles.input}\r\n              numberOfLines={1}\r\n              value={values.email}\r\n              placeholder=\"Enter email\"\r\n              onChangeText={handleChange(\"email\")}\r\n              autoCapitalize=\"none\"\r\n              autoCompleteType=\"email\"\r\n              keyboardType=\"email-address\"\r\n              onBlur={handleBlur(\"email\")}\r\n            />\r\n            <ErrorMessage errorValue={touched.email && errors.email} />\r\n            <TextInput\r\n              style={styles.input}\r\n              numberOfLines={1}\r\n              value={values.password}\r\n              placeholder=\"Enter password\"\r\n              onChangeText={handleChange(\"password\")}\r\n              autoCapitalize=\"none\"\r\n              onBlur={handleBlur(\"password\")}\r\n              secureTextEntry={true}\r\n            />\r\n            <ErrorMessage errorValue={touched.password && errors.password} />\r\n            <TouchableOpacity\r\n              onPress={handleSubmit}\r\n              style={styles.buttonContainer}\r\n            >\r\n              <Text style={styles.buttonText}>Login</Text>\r\n            </TouchableOpacity>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  errorContainer: {\r\n    marginVertical: 5,\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    marginTop: 40,\r\n  },\r\n  input: {\r\n    marginVertical: 10,\r\n    width: Dimensions.get(\"window\").width - 100,\r\n\r\n    height: 40,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n    borderRadius: 5,\r\n  },\r\n  buttonContainer: {\r\n    marginVertical: 10,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: 10,\r\n    width: Dimensions.get(\"window\").width - 200,\r\n    height: 44,\r\n    borderRadius: 5,\r\n    backgroundColor: \"#343434\",\r\n  },\r\n  buttonText: {\r\n    fontSize: 18,\r\n    color: \"#ffffff\",\r\n  },\r\n});\r\n"],"mappings":";;;;;;AAQA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,GAAG,MAAM,KAAK;AAAC;AAAA;AAAA;AAE3B,IAAMC,gBAAgB,GAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,KAAK,CAAC;EAC1CC,KAAK,EAAEJ,GAAG,CAACK,MAAM,EAAE,CAChBC,KAAK,CAAC,OAAO,CAAC,CACdF,KAAK,CAAC,qBAAqB,CAAC,CAC5BG,QAAQ,CAAC,iCAAiC,CAAC;EAC9CC,QAAQ,EAAER,GAAG,CAACK,MAAM,EAAE,CACnBC,KAAK,CAAC,UAAU,CAAC,CACjBC,QAAQ,EAAE,CACVE,GAAG,CAAC,CAAC,EAAE,2CAA2C;AACvD,CAAC,CAAC;AAEF,IAAMC,YAAY,GAAG,SAAfA,YAAY;EAAA,IAAMC,UAAU,QAAVA,UAAU;EAAA,OAChC,KAAC,IAAI;IAAC,KAAK,EAAEC,MAAM,CAACC,cAAe;IAAA,UACjC,KAAC,IAAI;MAAC,KAAK,EAAED,MAAM,CAACE,SAAU;MAAA,UAAEH;IAAU;EAAQ,EAC7C;AAAA,CACR;AAED,eAAe,SAASI,GAAG,GAAG;EAC5B,SAASC,cAAc,CAACC,MAAM,EAAE;IAC9B,IAAQb,KAAK,GAAea,MAAM,CAA1Bb,KAAK;MAAEI,QAAQ,GAAKS,MAAM,CAAnBT,QAAQ;IAEvBU,KAAK,kCAAgCd,KAAK,oBAAeI,QAAQ,CAAG;EACtE;EAEA,OACE,KAAC,IAAI;IAAC,KAAK,EAAEI,MAAM,CAACO,SAAU;IAAA,UAC5B,KAAC,MAAM;MACL,aAAa,EAAE;QAAEf,KAAK,EAAE,EAAE;QAAEI,QAAQ,EAAE;MAAG,CAAE;MAC3C,QAAQ,EAAE,kBAACS,MAAM,EAAEG,OAAO,EAAK;QAC7BJ,cAAc,CAACC,MAAM,EAAEG,OAAO,CAAC;MACjC,CAAE;MACF,gBAAgB,EAAEnB,gBAAiB;MAAA,UAElC;QAAA,IACCoB,YAAY,SAAZA,YAAY;UACZJ,MAAM,SAANA,MAAM;UACNK,MAAM,SAANA,MAAM;UACNC,OAAO,SAAPA,OAAO;UACPC,YAAY,SAAZA,YAAY;UACZC,UAAU,SAAVA,UAAU;QAAA,OAEV;UAAA,WACE,KAAC,SAAS;YACR,KAAK,EAAEb,MAAM,CAACc,KAAM;YACpB,aAAa,EAAE,CAAE;YACjB,KAAK,EAAET,MAAM,CAACb,KAAM;YACpB,WAAW,EAAC,aAAa;YACzB,YAAY,EAAEiB,YAAY,CAAC,OAAO,CAAE;YACpC,cAAc,EAAC,MAAM;YACrB,gBAAgB,EAAC,OAAO;YACxB,YAAY,EAAC,eAAe;YAC5B,MAAM,EAAEI,UAAU,CAAC,OAAO;UAAE,EAC5B,EACF,KAAC,YAAY;YAAC,UAAU,EAAEF,OAAO,CAACnB,KAAK,IAAIkB,MAAM,CAAClB;UAAM,EAAG,EAC3D,KAAC,SAAS;YACR,KAAK,EAAEQ,MAAM,CAACc,KAAM;YACpB,aAAa,EAAE,CAAE;YACjB,KAAK,EAAET,MAAM,CAACT,QAAS;YACvB,WAAW,EAAC,gBAAgB;YAC5B,YAAY,EAAEa,YAAY,CAAC,UAAU,CAAE;YACvC,cAAc,EAAC,MAAM;YACrB,MAAM,EAAEI,UAAU,CAAC,UAAU,CAAE;YAC/B,eAAe,EAAE;UAAK,EACtB,EACF,KAAC,YAAY;YAAC,UAAU,EAAEF,OAAO,CAACf,QAAQ,IAAIc,MAAM,CAACd;UAAS,EAAG,EACjE,KAAC,gBAAgB;YACf,OAAO,EAAEgB,YAAa;YACtB,KAAK,EAAEZ,MAAM,CAACe,eAAgB;YAAA,UAE9B,KAAC,IAAI;cAAC,KAAK,EAAEf,MAAM,CAACgB,UAAW;cAAA;YAAA;UAAa,EAC3B;QAAA,EAClB;MAAA;IACJ;EACM,EACJ;AAEX;AAEA,IAAMhB,MAAM,GAAGiB,UAAU,CAACC,MAAM,CAAC;EAC/BjB,cAAc,EAAE;IACdkB,cAAc,EAAE;EAClB,CAAC;EACDjB,SAAS,EAAE;IACTkB,KAAK,EAAE;EACT,CAAC;EACDb,SAAS,EAAE;IACTc,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAE;EACb,CAAC;EACDT,KAAK,EAAE;IACLK,cAAc,EAAE,EAAE;IAClBK,KAAK,EAAEC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACF,KAAK,GAAG,GAAG;IAE3CG,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,CAAC;IACdC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE;EAChB,CAAC;EACDf,eAAe,EAAE;IACfI,cAAc,EAAE,EAAE;IAClBY,cAAc,EAAE,QAAQ;IACxBT,UAAU,EAAE,QAAQ;IACpBO,OAAO,EAAE,EAAE;IACXL,KAAK,EAAEC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACF,KAAK,GAAG,GAAG;IAC3CG,MAAM,EAAE,EAAE;IACVG,YAAY,EAAE,CAAC;IACfE,eAAe,EAAE;EACnB,CAAC;EACDhB,UAAU,EAAE;IACViB,QAAQ,EAAE,EAAE;IACZb,KAAK,EAAE;EACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}